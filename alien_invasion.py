import sys  # модуль sys завершает игру по команде игрока
import pygame   # содержит функциональность, необходимую для создания игры
from settings import Settings  # подключаем модуль настроек


class AlienInvasion:
    """Класс для управления ресурсами и поведением игры."""
    def __init__(self):
        """Инициализирует игру и создает игровые ресурсы."""
        pygame.init()   # инициализирует настройки, необходимые Pygame для нормальной работы

        self.settings = Settings()

        self.screen = pygame.display.set_mode((self.settings.screen_width, self.settings.screen_height))  # создает окно,
        # в котором прорисовываются все графические элементы игры
        # объект окна присваивается атрибуту self.screen, что позволяет работать с ним во всех методах класса
        # поверхность, возвращаемая display.set_mode(), представляет все игровое окно

        pygame.display.set_caption("Alien Invasion")

        # Назначение цвета фона.
        self.bg_color = (230, 230, 230)  # Цвета в Pygame задаются в схеме RGB и сохраняются в переменной

    def run_game(self):  # Процессом игры управляет метод run_game()
        """Запуск основного цикла игры."""
        while True:
            # Отслеживание событий клавиатуры и мыши.
            for event in pygame.event.get():  # цикл событий
                # Для получения доступа к событиям, обнаруженным Pygame, используется метод pygame.event.get().
                # Он возвращает список событий, произошедших с момента последнего вызова этой функции.
                # При любом событии клавиатуры или мыши отрабатывает цикл for.

                if event.type == pygame.QUIT:
                    # В этом цикле записывается серия команд if для обнаружения и обработки конкретных событий.
                    # Например, когда игрок щелкает на кнопке закрытия игрового окна, программа обнаруживает
                    # событие pygame.QUIT и вызывает метод sys.exit() для выхода из игры
                    sys.exit()

                # При каждом проходе цикла перерисовывается экран.
                # Экран заполняется цветом фона. Для этого вызывается метод fill(),
                # получающий всего один аргумент: цвет фона
                self.screen.fill(self.settings.bg_color)

            # Отображение последнего прорисованного экрана.
            # В данном случае при каждом выполнении цикла while будет отображаться пустой экран со стиранием старого
            # экрана, так что виден будет только новый экран.
            # При перемещении игровых элементов вызов pygame.display.flip() будет постоянно обновлять экран,
            # отображая игровые элементы в новых позициях и скрывая старые изображения; таким образом создается
            # иллюзия плавного движения.
            pygame.display.flip()


if __name__ == '__main__':
    # Создание экземпляра и запуск игры.
    # Вызов run_game() заключается в блок if, чтобы он выполнялся только при прямом вызове функции
    ai = AlienInvasion()
    ai.run_game()
